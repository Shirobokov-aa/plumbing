"use client";

import type React from "react";
import { createContext, useContext, useState, useCallback, useEffect } from "react";
import { Alert } from "@/components/ui/alert"
import { db } from '@/db';
import { sectionsTable } from '@/db/schema';
// import type { BathroomPage } from "../types"


export interface ImageBlockData {
  src: string;
  alt: string;
  desc?: string;
  url?: string;
  width?: number;
  height?: number;
}

interface Section {
  title?: string;
  description?: string;
  link?: { name: string; url: string };
  images_block?: Array<{
    src: string;
    alt: string;
    desc?: string;
    url?: string;
  }>;
  images?: Array<{
    src: string;
    alt: string;
    width: number;
    height: number;
  }>;
}

interface SectionsMainPage {
  [key: string]: Section;
}



interface BathroomSection {
  title: string;
  description: string;
  link: { text: string; url: string };
  images: ImageBlockData[];
}

interface KitchenSection {
  title: string;
  description: string;
  link: { text: string; url: string };
  images: ImageBlockData[];
}
interface AboutSection {
  title: string;
  description: string;
  // link: { text: string; url: string };
  // images: ImageBlockData[];
}

interface BathroomPage {
  banner: {
    name: string;
    image: string;
    title: string;
    description: string;
    link: { text: string; url: string };
  };
  sections: BathroomSection[];
  collections: BathroomCollection[];
}

interface KitchenPage {
  banner: {
    name: string;
    image: string;
    title: string;
    description: string;
    link: { text: string; url: string };
  };
  sections: KitchenSection[];
  collections: KitchenCollection[];
}

interface AboutPage {
  banner: {
    name: string;
    image: string;
    title: string;
    description: string;
    link: { text: string; url: string };
  };
  sections: AboutSection[];
  // collections: KitchenCollection[]
}

interface BathroomCollection {
  title: string;
  description: string;
  link: { text: string; url: string };
  images: ImageBlockData[];
}

interface KitchenCollection {
  title: string;
  description: string;
  link: { text: string; url: string };
  images: ImageBlockData[];
}

export interface CollectionItem {
  id: number;
  title: string;
  desc: string;
  image: string;
  link: string;
  flexDirection: "xl:flex-row" | "xl:flex-row-reverse";
}

export interface CollectionDetailItem {
  id: number;
  name: string;
  link?: string;
  banner: {
    title: string;
    description: string;
    image: string;
  };
  sections: Array<{
    title: string;
    description: string;
    image: string;
    link?: { text: string; url: string };
    images?: Array<{ src: string; alt: string }>;
  }>;
  sections2: Array<{
    title: string;
    description: string;
    image: string;
    link?: { text: string; url: string };
    images?: Array<{ src: string; alt: string }>;
    titleDesc?: string;
    descriptionDesc?: string;
  }>;
  sections3: Array<{
    title: string;
    description: string;
    image: string;
    link?: { text: string; url: string };
    images?: Array<{ src: string; alt: string }>;
    titleDesc?: string;
    descriptionDesc?: string;
  }>;
  sections4: Array<{
    title: string;
    description: string;
    image: string;
    link?: { text: string; url: string };
    images?: Array<{ src: string; alt: string }>;
    titleDesc?: string;
    descriptionDesc?: string;
  }>;
}

interface AlertType {
  message: string;
  type: 'success' | 'error';
}

interface SectionsContextType {
  sections: SectionsMainPage;
  collections: CollectionItem[];
  collectionDetails: CollectionDetailItem[];
  bathroomPage: BathroomPage | null
  kitchenPage: KitchenPage;
  aboutPage: AboutPage;
  
  updateSection: (sectionName: string, data: any) => Promise<void>;
  updateCollections: (newCollections: CollectionItem[], isEdit?: boolean) => Promise<void>;
  updateCollectionDetails: (newDetails: CollectionDetailItem[], isEdit?: boolean) => Promise<void>;
  updateBathroomPage: (newData: BathroomPage) => void;
  updateKitchenPage: (newData: KitchenPage) => void;
  updateAboutPage: (newData: AboutPage) => void;
  fetchCollections: () => Promise<void>;
  fetchCollectionDetails: () => Promise<void>;
  fetchAboutPage: () => Promise<void>;
  updateCollectionDetail: (id: number, data: any) => Promise<void>;
}

export const SectionsContext = createContext<SectionsContextType | null>(null)

export const SectionsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [sections, setSections] = useState<SectionsMainPage>({});
  const [collections, setCollections] = useState<CollectionItem[]>([])
  const [collectionDetails, setCollectionDetails] = useState<CollectionDetailItem[]>([])
  const [alert, setAlert] = useState<AlertType | null>(null);

  const loadSections = useCallback(async () => {
    try {
      console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ü–∏–π...");
      const response = await fetch('/api/sections');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–π:", data);
      
      if (data && typeof data === 'object') {
        setSections(data);
        console.log("–°–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–π:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    loadSections();
  }, [loadSections]);

  const updateSection = async (sectionName: string, data: any) => {
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', { sectionName, data });
      
      const response = await fetch('/api/sections', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sectionName, data }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const updatedData = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', updatedData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setSections(updatedData);
      
      // –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
      const response2 = await fetch('/api/sections', { 
        cache: 'no-store',
        headers: { 'Cache-Control': 'no-cache' }
      });
      const freshData = await response2.json();
      setSections(freshData);

      setAlert({
        message: '–°–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        type: 'success'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏',
        type: 'error'
      });
    }
  };

  const fetchCollections = useCallback(async () => {
    try {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
      const response = await fetch("/api/collections")
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const data = await response.json()
      console.log("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π:", data)
      if (Array.isArray(data)) {
        setCollections(data)
      } else if (data && Array.isArray(data.data)) {
        setCollections(data.data)
      } else {
        console.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", data)
        setCollections([])
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π:", error)
    }
  }, [])

  useEffect(() => {
    fetchCollections()
  }, [fetchCollections])

  const updateCollections = async (newCollections: CollectionItem[], isEdit = false) => {
    try {
      const response = await fetch("/api/collections", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ data: newCollections, isEdit }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      setCollections(result.data);
      setAlert({
        message: '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        type: 'success'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π',
        type: 'error'
      });
      throw error;
    }
  };

  const updateCollectionDetails = async (newDetails: CollectionDetailItem[], isEdit = false) => {
    try {
      const response = await fetch("/api/collectionDetails", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ data: newDetails, isEdit }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      setCollectionDetails(result.data);
      setAlert({
        message: '–î–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        type: 'success'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
        type: 'error'
      });
      throw error;
    }
  };

  const fetchCollectionDetails = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (collectionDetails.length > 0) {
        return collectionDetails
      }

      const response = await fetch('/api/collectionDetails')
      if (!response.ok) {
        throw new Error('Failed to fetch collection details')
      }
      const data = await response.json()
      console.log("ÔøΩÔøΩ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö:", data)
      setCollectionDetails(data)
      return data
    } catch (error) {
      console.error('Error fetching collection details:', error)
      throw error
    }
  }

  useEffect(() => {
    fetchCollectionDetails()
  }, [fetchCollectionDetails])

  const [bathroomPage, setBathroomPage] = useState<BathroomPage>({
    banner: {
      name: "–í–∞–Ω–Ω–∞—è",
      image: "/img/banner01.png",
      title: "",
      description: "",
      link: { text: "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", url: "/bathroom" },
    },
    sections: [
      {
        title: "–°–º–µ—Å–∏—Ç–µ–ª–∏ –¥–ª—è –≤–∞–Ω–Ω–æ–π –∏ –¥—É—à–∞",
        description: "–£–¥–æ–±—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º —Ä–µ—à–µ–Ω–∏–∏",
        link: { text: "–°–º–æ—Ç—Ä–µ—Ç—å", url: "/bathroom/faucets" },
        images: [
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 1" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 2" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 3" },
        ],
      },
      {
        title: "–°–º–µ—Å–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∫–æ–≤–∏–Ω—ã",
        description: "–£–¥–æ–±—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º —Ä–µ—à–µ–Ω–∏–∏",
        link: { text: "–°–º–æ—Ç—Ä–µ—Ç—å", url: "/bathroom/faucets" },
        images: [
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 1" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 2" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 3" },
        ],
      },
      {
        title: "–î—É—à–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        description: "–£–¥–æ–±—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º —Ä–µ—à–µ–Ω–∏–∏",
        link: { text: "–°–º–æ—Ç—Ä–µ—Ç—å", url: "/bathroom/faucets" },
        images: [
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 1" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 2" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –≤–∞–Ω–Ω–æ–π 3" },
        ],
      },
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ],
    collections: [
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
      {
        title: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π",
        description: "–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏",
        link: { text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url: "/bathroom/collections/1" },
        images: [
          { src: "/img/item01.png", alt: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π 1" },
          { src: "/img/item01.png", alt: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π 2" },
          { src: "/img/item01.png", alt: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π 3" },
        ],
      },
      // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ],
  });

  const [kitchenPage, setKitchenPage] = useState<KitchenPage>({
    banner: {
      name: "–ö—É—Ö–Ω—è",
      image: "/img/banner01.png",
      title: "",
      description: "",
      link: { text: "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", url: "/kitchen" },
    },
    sections: [
      {
        title: "–°–º–µ—Å–∏—Ç–µ–ª–∏ –¥–ª—è –∫—É—Ö–Ω–∏",
        description: "–ö–æ–º—Ñ–æ—Ä—Ç, –∫–∞—á–µ—Å—Ç–≤–æ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–π –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã",
        link: { text: "–°–º–æ—Ç—Ä–µ—Ç—å", url: "/kitchen/faucets" },
        images: [
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ 1" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ 2" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ 3" },
        ],
      },
      {
        title: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        description: "–î–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç —É–¥–æ–±—Å—Ç–≤–æ –∏ —Å—Ç–∏–ª—å.",
        link: { text: "–°–º–æ—Ç—Ä–µ—Ç—å", url: "/kitchen/faucets" },
        images: [
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ 1" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ 2" },
          { src: "", alt: "–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏ 3" },
        ],
      },
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ],
    collections: [
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
      {
        title: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –∫—É—Ö–Ω–∏",
        description: "–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏",
        link: { text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url: "/kitchen/collections/1" },
        images: [
          { src: "/img/item01.png", alt: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π 1" },
          { src: "/img/item02.png", alt: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π 2" },
          { src: "/img/item03.png", alt: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–Ω–Ω–æ–π 3" },
        ],
      },
      // –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ],
  });

  const [aboutPage, setAboutPage] = useState<AboutPage>({
    banner: {
      name: "–û –ö–æ–º–ø–∞–Ω–∏–∏",
      image: "/img/banner01.png",
      title: "",
      description: "",
      link: { text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ö–æ–ª–ª–µ–∫—Ü–∏–∏", url: "/collection" },
    },
    sections: [
      {
        title: "–û –Ω–∞—Å",
        description:
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit i",
      },
    ],
  });

  const updateBathroomPage = async (newData: BathroomPage) => {
    try {
      const response = await fetch('/api/bathroomPage', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: newData }),
      });
  
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${errorText}`);
      }
  
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const updatedData = await response.json();
      setBathroomPage(updatedData.data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  
      setAlert({
        message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–Ω–Ω–æ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        type: 'success'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        type: 'error'
      });
    }
  };

  const fetchBathroomPage = async () => {
    try {
      const response = await fetch('/api/bathroomPage');
      if (!response.ok) {
        throw new Error('Failed to fetch bathroom page data');
      }
      const data = await response.json();
      setBathroomPage(data.data);
    } catch (error) {
      console.error('Error fetching bathroom page:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö',
        type: 'error'
      });
    }
  };

  useEffect(() => {
    fetchBathroomPage();
  }, []);

  const updateKitchenPage = async (newData: KitchenPage) => {
    try {
      const response = await fetch('/api/kitchenPage', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: newData }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${errorText}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const updatedData = await response.json();
      setKitchenPage(updatedData.data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

      setAlert({
        message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫—É—Ö–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        type: 'success'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        type: 'error'
      });
    }
  };

  const fetchKitchenPage = async () => {
    try {
      const response = await fetch('/api/kitchenPage');
      if (!response.ok) {
        throw new Error('Failed to fetch kitchen page data');
      }
      const data = await response.json();
      setKitchenPage(data.data);
    } catch (error) {
      console.error('Error fetching kitchen page:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö',
        type: 'error'
      });
    }
  };

  useEffect(() => {
    fetchKitchenPage();
  }, []);

  const fetchAboutPage = async () => {
    try {
      const response = await fetch('/api/aboutPage');
      if (!response.ok) {
        throw new Error('Failed to fetch about page data');
      }
      const data = await response.json();
      setAboutPage(data.data);
    } catch (error) {
      console.error('Error fetching about page:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö',
        type: 'error'
      });
    }
  };

  useEffect(() => {
    fetchAboutPage();
  }, []);

  const updateAboutPage = async (newData: any) => {
    try {
      const response = await fetch('/api/aboutPage', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ data: newData }),
      });

      if (!response.ok) {
        throw new Error('Failed to update about page');
      }

      const updatedData = await response.json();
      setAboutPage(updatedData.data);
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await fetchAboutPage();
      
      setAlert({
        message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –û –∫–æ–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        type: 'success'
      });
    } catch (error) {
      console.error('Error updating about page:', error);
      setAlert({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        type: 'error'
      });
    }
  };

  const updateCollectionDetail = async (id: number, data: any) => {
    try {
      const response = await fetch(`/api/collections/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ data }),
      });

      if (!response.ok) {
        throw new Error('Failed to update collection detail');
      }

      const result = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      setCollectionDetails((prev) => {
        const newDetails = [...prev];
        const index = newDetails.findIndex((detail) => detail.id === id);
        if (index !== -1) {
          newDetails[index] = { ...newDetails[index], ...data };
        }
        return newDetails;
      });

      return result;
    } catch (error) {
      console.error('Error updating collection detail:', error);
      throw error;
    }
  };

  return (
    <SectionsContext.Provider
      value={{
        sections,
        collections,
        collectionDetails,
        bathroomPage,
        kitchenPage,
        aboutPage,
        updateSection,
        updateCollections,
        updateCollectionDetails,
        updateBathroomPage,
        updateKitchenPage,
        updateAboutPage,
        fetchCollections,
        fetchCollectionDetails,
        fetchAboutPage,
        updateCollectionDetail,
      }}
    >
      {alert && <Alert message={alert.message} type={alert.type} />}
      {children}
    </SectionsContext.Provider>
  );

};

export const useSections = () => {
  const context = useContext(SectionsContext);
  if (context === null) {
    throw new Error("useSections must be used within a SectionsProvider");
  }
  return context;
};
